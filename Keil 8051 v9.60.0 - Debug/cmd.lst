C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\cmd.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe F:\simplicity_st
                    -udo_workspace\F31x_Blinky\cmd.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED)
                    - INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051
                    -Base;D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/C8051F310/inc) PRINT(.\cmd.lst) COND PAGEWIDT
                    -H(120) PAGELENGTH(65) OBJECT(.\cmd.OBJ)

line level    source

   1          /*
   2           * cmd.c
   3           *
   4           *  Created on: 2020年1月27日
   5           *      Author: wrangler
   6           */
   7          #include "./src/uart.h"
   8          #include "cmd.h"
   9          
  10          //cmd format
  11          //0-1 eb 90
  12          //2-5 ftw_lower_1
  13          //6-9 ftw_upper_1
  14          //10-13 ftw_lower_2
  15          //14-17 ftw_upper_2
  16          //18-21 step
  17          //22-23 rate
  18          //24-27 re-sweep period
  19          //28 tx衰减
  20          //29 系统模式， 01-tv,11-tr/tv切换,bit2-校准使能，bit3-射频开关
  21          //30 rx三个接收通道供电控制，bit0-通道1，bit1-通道2，bit2-通道3
  22          //31-33 rx三个接收通道衰减
  23          //34-36 rx三个接收通道移相控制
  24          //37~40 校准时长
  25          //41 crc
  26          
  27          idata unsigned char cmd_msg[42] = {0xeb,0x90};
  28          
  29          unsigned char Uart_buff[15];
  30          unsigned char Uart_buff_size = 0;
  31          
  32          float step_scale = 4294967296.0 / 3400.0;//2^32/fs
  33          float clock_scale = 24.0 / 3400.0;  //us
  34          
  35          unsigned long freq_modulate = 20;//MHz/us
  36          unsigned long freq_sweep_bw = 250;//us
  37          unsigned long freq_mid = 17500;//MHz
  38          
  39          //求最大公约数
  40          unsigned long gcd(unsigned long x, unsigned long y)
  41          {
  42   1              unsigned long gcdNum = 1;
  43   1              while (x != y)
  44   1              {
  45   2                      if (x % 2 == 0 && y % 2 == 0)
  46   2                      {
  47   3                              x /= 2;
  48   3                              y /= 2;
  49   3                              gcdNum *= 2;
  50   3                      }
  51   2                      else
  52   2                      {
C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 2   

  53   3                              if (x > y)
  54   3                                      x -= y;
  55   3                              else
  56   3                                      y -= x;
  57   3                      }
  58   2              }
  59   1              return gcdNum * x;
  60   1      }
  61          
  62          unsigned long String2Long(unsigned char* buf,unsigned char dec)
  63          {
  64   1              unsigned char i;
  65   1              unsigned long res=0,var,temp = 1;
  66   1              for(i=0;i<dec;i++)
  67   1              {
  68   2                      var = buf[dec - i - 1] - 0x30;
  69   2                      var *= temp;
  70   2                      res += var;
  71   2      
  72   2                      temp *= 10;
  73   2              }
  74   1      
  75   1              return res;
  76   1      }
  77          
  78          void Format2Cmd(unsigned char* cmd,unsigned long var)
  79          {
  80   1              cmd[0] = ((var & 0xff000000) >> 24);
  81   1              cmd[1] = ((var & 0xff0000) >> 16);
  82   1              cmd[2] = ((var & 0xff00) >> 8);
  83   1              cmd[3] = var;
  84   1      }
  85          
  86          void FTWGen(unsigned long freq)
  87          {
  88   1              unsigned long ftw=0,div;
  89   1              float temp,m,n;
  90   1      
  91   1              //整数频率
  92   1              ftw = freq_sweep_bw >> 1;
  93   1              ftw = freq - ftw;
  94   1              div = gcd(ftw,3400);
  95   1              m = ftw / div;
  96   1              n = 3400 / div;
  97   1              temp = 65536.0 / n;
  98   1              temp *= 65536.0;
  99   1              temp *= m;
 100   1              ftw = temp;
 101   1              cmd_msg[2] = ((ftw & 0xff000000) >> 24);
 102   1              cmd_msg[3] = ((ftw & 0xff0000) >> 16);
 103   1              cmd_msg[4] = ((ftw & 0xff00) >> 8);
 104   1              cmd_msg[5] = ftw;
 105   1      
 106   1              ftw = freq_sweep_bw >> 1;
 107   1              ftw = freq + ftw;
 108   1              div = gcd(ftw,3400);
 109   1              m = ftw / div;
 110   1              n = 3400 / div;
 111   1              temp = 65536.0 / n;
 112   1              temp *= 65536.0;
 113   1              temp *= m;
 114   1              ftw = temp;
 115   1              cmd_msg[6] = ((ftw & 0xff000000) >> 24);
C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 3   

 116   1              cmd_msg[7] = ((ftw & 0xff0000) >> 16);
 117   1              cmd_msg[8] = ((ftw & 0xff00) >> 8);
 118   1              cmd_msg[9] = ftw;
 119   1      
 120   1              //小数频率
 121   1              ftw = freq_sweep_bw >> 1;
 122   1              m = freq + 2.5 - ftw;
 123   1              ftw = m *10.0;
 124   1              div = gcd(ftw,34000);
 125   1              m = ftw / div;
 126   1              n = 34000 / div;
 127   1              temp = 65536.0 / n;
 128   1              temp *= 65536.0;
 129   1              temp *= m;
 130   1              ftw = temp;
 131   1              cmd_msg[10] = ((ftw & 0xff000000) >> 24);
 132   1              cmd_msg[11] = ((ftw & 0xff0000) >> 16);
 133   1              cmd_msg[12] = ((ftw & 0xff00) >> 8);
 134   1              cmd_msg[13] = ftw;
 135   1      
 136   1              ftw = freq_sweep_bw >> 1;
 137   1              m = freq + 2.5 + ftw;
 138   1              ftw = m * 10.0;
 139   1              div = gcd(ftw,34000);
 140   1              m = ftw / div;
 141   1              n = 34000 / div;
 142   1              temp = 65536.0 / n;
 143   1              temp *= 65536.0;
 144   1              temp *= m;
 145   1              ftw = temp;
 146   1              cmd_msg[14] = ((ftw & 0xff000000) >> 24);
 147   1              cmd_msg[15] = ((ftw & 0xff0000) >> 16);
 148   1              cmd_msg[16] = ((ftw & 0xff00) >> 8);
 149   1              cmd_msg[17] = ftw;
 150   1      }
 151          
 152          void BuffDel(unsigned char len)
 153          {
 154   1              unsigned char i;
 155   1              Uart_buff_size -= len;
 156   1              for(i=0;i<Uart_buff_size;i++)
 157   1                      Uart_buff[i] = Uart_buff[i+len];
 158   1      }
 159          
 160          void CmdCrcCalc()
 161          {
 162   1              unsigned char i;
 163   1              cmd_msg[41] = 0;
 164   1              for(i=0;i<41;i++)
 165   1                      cmd_msg[41] += cmd_msg[i];
 166   1      }
 167          
 168          unsigned char Frame2CmdConvert()
 169          {
 170   1              unsigned char len;
 171   1              unsigned long var;
 172   1              float fvar;
 173   1      
 174   1              len = UART_GetBuff(Uart_buff + Uart_buff_size,15-Uart_buff_size);
 175   1              Uart_buff_size += len;
 176   1      
 177   1              if(Uart_buff_size < 4)
 178   1                      return 0;
C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 4   

 179   1      
 180   1              if((Uart_buff[0] == '#')
 181   1                              && (Uart_buff[1] == 'K')
 182   1                              && (Uart_buff[2] == 'R'))
 183   1              {
 184   2                      if(Uart_buff_size < 10)
 185   2                              return 0;
 186   2      
 187   2                      var = String2Long(Uart_buff+4,6);
 188   2                      var /= 32768;
 189   2                      freq_modulate = var;
 190   2      
 191   2                      len = 10;
 192   2              }
 193   1              else if((Uart_buff[0] == '#')
 194   1                              && (Uart_buff[1] == 'P')
 195   1                              && (Uart_buff[2] == 'W'))
 196   1              {
 197   2                      if(Uart_buff_size < 11)
 198   2                              return 0;
 199   2      
 200   2                      var = String2Long(Uart_buff+4,7);
 201   2                      freq_sweep_bw = freq_modulate * var;
 202   2                      freq_sweep_bw /= 4;
 203   2      
 204   2                      fvar = var / clock_scale;
 205   2                      fvar = freq_sweep_bw / fvar;
 206   2                      var = fvar * step_scale;
 207   2                      Format2Cmd(cmd_msg+18,var);
 208   2      
 209   2                      cmd_msg[22] = 0x00;
 210   2                      cmd_msg[23] = 0x01;
 211   2      
 212   2                      len = 11;
 213   2              }
 214   1              else if((Uart_buff[0] == '#')
 215   1                              && (Uart_buff[1] == 'G')
 216   1                              && (Uart_buff[2] == 'N'))
 217   1              {
 218   2                      if(Uart_buff_size < 6)
 219   2                              return 0;
 220   2      
 221   2                      len = 6;
 222   2              }
 223   1              else if((Uart_buff[0] == '#')
 224   1                              && (Uart_buff[1] == 'R')
 225   1                              && (Uart_buff[2] == 'F'))
 226   1              {
 227   2                      if(Uart_buff_size < 5)
 228   2                              return 0;
 229   2                      if(Uart_buff[4] == '1')
 230   2                              cmd_msg[29] |= 0x08;
 231   2                      else cmd_msg[29] &= ~0x08;
 232   2                      len = 5;
 233   2              }
 234   1              else if((Uart_buff[0] == '#')
 235   1                              && (Uart_buff[1] == 'C')
 236   1                              && (Uart_buff[2] == 'T'))
 237   1              {
 238   2                      if(Uart_buff_size < 10)
 239   2                              return 0;
 240   2      
 241   2                      var = String2Long(Uart_buff+4,6);
C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 5   

 242   2                      if(var != 0)
 243   2                              cmd_msg[29] |= 0x04;
 244   2                      else cmd_msg[29] &= ~0x04;
 245   2      
 246   2                      fvar = var;
 247   2                      fvar /= 10.0;
 248   2                      fvar /= clock_scale;
 249   2                      fvar *= 1000000.0;
 250   2                      var = fvar;
 251   2                      Format2Cmd(cmd_msg+37,var);
 252   2      
 253   2                      len = 10;
 254   2              }
 255   1              else if((Uart_buff[0] == '#')
 256   1                              && (Uart_buff[1] == 'F')
 257   1                              && (Uart_buff[2] == 'R')
 258   1                              && (Uart_buff[3] == 'Q'))
 259   1              {
 260   2                      if(Uart_buff_size < 10)
 261   2                              return 0;
 262   2      
 263   2                      var = String2Long(Uart_buff+5,5);
 264   2                      var -= 13500;
 265   2                      var /= 4;
 266   2      
 267   2                      freq_mid = var;
 268   2      
 269   2                      len = 10;
 270   2              }
 271   1              else if((Uart_buff[0] == '#')
 272   1                              && (Uart_buff[1] == 'P')
 273   1                              && (Uart_buff[2] == 'R')
 274   1                              && (Uart_buff[3] == 'T'))
 275   1              {
 276   2                      if(Uart_buff_size < 12)
 277   2                              return 0;
 278   2      
 279   2                      var = String2Long(Uart_buff+5,7);
 280   2                      var /= clock_scale;
 281   2                      Format2Cmd(cmd_msg+24,var);
 282   2                      len = 12;
 283   2              }
 284   1              else if((Uart_buff[0] == '#')
 285   1                              && (Uart_buff[1] == 'M')
 286   1                              && (Uart_buff[2] == 'O')
 287   1                              && (Uart_buff[3] == 'D'))
 288   1              {
 289   2                      if(Uart_buff_size < 6)
 290   2                              return 0;
 291   2      
 292   2                      cmd_msg[29] &= ~0x03;
 293   2                      cmd_msg[30] &= ~0x07;
 294   2                      if(Uart_buff[5] == '1')
 295   2                      {
 296   3                              cmd_msg[29] |= 0x01;
 297   3                              cmd_msg[30] |= 0x01;
 298   3                      }
 299   2                      else if(Uart_buff[5] == '2')
 300   2                      {
 301   3                              cmd_msg[29] |= 0x03;
 302   3                              cmd_msg[30] |= 0x03;
 303   3                      }
 304   2                      else if(Uart_buff[5] == '3')
C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 6   

 305   2                      {
 306   3                              cmd_msg[29] |= 0x01;
 307   3                              cmd_msg[30] |= 0x03;
 308   3                      }
 309   2                      else if(Uart_buff[5] == '4')
 310   2                      {
 311   3                              cmd_msg[29] |= 0x01;
 312   3                              cmd_msg[30] |= 0x07;
 313   3                      }
 314   2                      len = 6;
 315   2              }
 316   1              else if((Uart_buff[0] == '#')
 317   1                              && (Uart_buff[1] == 'A')
 318   1                              && (Uart_buff[2] == 'T')
 319   1                              && (Uart_buff[3] == 'T'))
 320   1              {
 321   2                      if(Uart_buff_size < 7)
 322   2                              return 0;
 323   2                      var = String2Long(Uart_buff+5,2);
 324   2                      var = (var << 1);
 325   2                      cmd_msg[28] = var;
 326   2                      cmd_msg[28] = ~cmd_msg[28];
 327   2      
 328   2                      len = 7;
 329   2              }
 330   1              else if((Uart_buff[0] == '#')
 331   1                              && (Uart_buff[1] == 'A')
 332   1                              && (Uart_buff[2] == 'A')
 333   1                              && (Uart_buff[3] == 'A'))
 334   1              {
 335   2                      if(Uart_buff_size < 7)
 336   2                              return 0;
 337   2                      var = String2Long(Uart_buff+5,2);
 338   2                      var = ~var;
 339   2                      cmd_msg[31] = 0;
 340   2                      cmd_msg[31] |= (var & 0x01)<<5;
 341   2                      cmd_msg[31] |= (var & 0x02)<<3;
 342   2                      cmd_msg[31] |= (var & 0x04)<<1;
 343   2                      cmd_msg[31] |= (var & 0x08)>>1;
 344   2                      cmd_msg[31] |= (var & 0x10)>>3;
 345   2                      cmd_msg[31] |= (var & 0x20)>>5;
 346   2                      len = 7;
 347   2              }
 348   1              else if((Uart_buff[0] == '#')
 349   1                              && (Uart_buff[1] == 'P')
 350   1                              && (Uart_buff[2] == 'S')
 351   1                              && (Uart_buff[3] == 'A'))
 352   1              {
 353   2                      if(Uart_buff_size < 7)
 354   2                              return 0;
 355   2                      var = String2Long(Uart_buff+5,2);
 356   2                      cmd_msg[34] = var;
 357   2                      len = 7;
 358   2              }
 359   1              else if((Uart_buff[0] == '#')
 360   1                              && (Uart_buff[1] == 'A')
 361   1                              && (Uart_buff[2] == 'A')
 362   1                              && (Uart_buff[3] == 'B'))
 363   1              {
 364   2                      if(Uart_buff_size < 7)
 365   2                              return 0;
 366   2                      var = String2Long(Uart_buff+5,2);
 367   2                      var = ~var;
C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 7   

 368   2                      cmd_msg[32] = 0;
 369   2                      cmd_msg[32] |= (var & 0x01)<<5;
 370   2                      cmd_msg[32] |= (var & 0x02)<<3;
 371   2                      cmd_msg[32] |= (var & 0x04)<<1;
 372   2                      cmd_msg[32] |= (var & 0x08)>>1;
 373   2                      cmd_msg[32] |= (var & 0x10)>>3;
 374   2                      cmd_msg[32] |= (var & 0x20)>>5;
 375   2                      len = 7;
 376   2              }
 377   1              else if((Uart_buff[0] == '#')
 378   1                              && (Uart_buff[1] == 'P')
 379   1                              && (Uart_buff[2] == 'S')
 380   1                              && (Uart_buff[3] == 'B'))
 381   1              {
 382   2                      if(Uart_buff_size < 7)
 383   2                              return 0;
 384   2                      var = String2Long(Uart_buff+5,2);
 385   2                      cmd_msg[35] = var;
 386   2                      len = 7;
 387   2              }
 388   1              else if((Uart_buff[0] == '#')
 389   1                              && (Uart_buff[1] == 'A')
 390   1                              && (Uart_buff[2] == 'A')
 391   1                              && (Uart_buff[3] == 'C'))
 392   1              {
 393   2                      if(Uart_buff_size < 7)
 394   2                              return 0;
 395   2                      var = String2Long(Uart_buff+5,2);
 396   2                      var = ~var;
 397   2                      cmd_msg[33] = 0;
 398   2                      cmd_msg[33] |= (var & 0x01)<<5;
 399   2                      cmd_msg[33] |= (var & 0x02)<<3;
 400   2                      cmd_msg[33] |= (var & 0x04)<<1;
 401   2                      cmd_msg[33] |= (var & 0x08)>>1;
 402   2                      cmd_msg[33] |= (var & 0x10)>>3;
 403   2                      cmd_msg[33] |= (var & 0x20)>>5;
 404   2                      len = 7;
 405   2              }
 406   1              else if((Uart_buff[0] == '#')
 407   1                              && (Uart_buff[1] == 'P')
 408   1                              && (Uart_buff[2] == 'S')
 409   1                              && (Uart_buff[3] == 'C'))
 410   1              {
 411   2                      if(Uart_buff_size < 7)
 412   2                              return 0;
 413   2                      var = String2Long(Uart_buff+5,2);
 414   2                      cmd_msg[36] = var;
 415   2                      len = 7;
 416   2      
 417   2                      FTWGen(freq_mid);
 418   2                      CmdCrcCalc();
 419   2                      BuffDel(len);
 420   2                      return 1;
 421   2              }
 422   1              else len = 1;
 423   1      
 424   1              BuffDel(len);
 425   1      
 426   1              return 0;
 427   1      }
 428          
 429          
 430          
C51 COMPILER V9.60.0.0   CMD                                                               03/19/2020 17:00:45 PAGE 8   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3496    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36      66
   IDATA SIZE       =     42    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
