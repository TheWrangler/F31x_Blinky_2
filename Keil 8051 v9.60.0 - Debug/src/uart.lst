C51 COMPILER V9.60.0.0   UART                                                              03/19/2020 17:00:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\src\uart.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe F:\simplicity_st
                    -udo_workspace\F31x_Blinky\src\uart.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,S
                    -PEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/s
                    -i8051Base;D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/C8051F310/inc) PRINT(.\src\uart.lst) CON
                    -D PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\uart.OBJ)

line level    source

   1          /*
   2           * uart.c
   3           *
   4           *  Created on: 2020Äê1ÔÂ22ÈÕ
   5           *      Author: wrangler
   6           */
   7          #include <SI_C8051F310_Register_Enums.h>
   8          #include "uart.h"
   9          
  10          unsigned int Uart_Baud = 9600;
  11          unsigned char Uart_Recv_buff[5];
  12          unsigned char Uart_Recv_buff_size = 0;
  13          
  14          idata unsigned char sta_msg[18] = {'$','s','t','a',',','0','0','0','.','0',',','0','.','0','*',0x0d,0x0a};
  15          unsigned char sta_msg_len = 0;
  16          unsigned char sta_msg_send_count = 0;
  17          unsigned char sta_msg_send_complete = 1;
  18          
  19          void UART_Init()
  20          {
  21   1              //8-bit Uart Mode
  22   1              //receive enable
  23   1          SCON0     = 0x10;
  24   1      }
  25          
  26          SI_INTERRUPT(UART0_Interrupt, 4)
  27          {
  28   1              if((SCON0 & 0x01) == 0x01)//receive
  29   1              {
  30   2                      SCON0 &= ~0x01;//clear Recv. INT Flag
  31   2      
  32   2                      if(Uart_Recv_buff_size == 5)
  33   2                              Uart_Recv_buff_size = 0;
  34   2      
  35   2                      Uart_Recv_buff[Uart_Recv_buff_size] = SBUF0;
  36   2                      Uart_Recv_buff_size++;
  37   2              }
  38   1      
  39   1              if((SCON0 & 0x02) == 0x02)
  40   1              {
  41   2                      SCON0 &= ~0x02;
  42   2                      if(sta_msg_send_count == sta_msg_len)
  43   2                      {
  44   3                              sta_msg_send_complete = 1;
  45   3                              return;
  46   3                      }
  47   2      
  48   2                      SBUF0 = sta_msg[sta_msg_send_count];
  49   2                      sta_msg_send_count++;
  50   2              }
  51   1      }
  52          
C51 COMPILER V9.60.0.0   UART                                                              03/19/2020 17:00:45 PAGE 2   

  53          void UART_Send()
  54          {
  55   1              sta_msg_send_count = 0;
  56   1              sta_msg_send_complete = 0;
  57   1              SCON0 |= 0x02;
  58   1      }
  59          
  60          unsigned char UART_GetBuff(unsigned char* pBuf,unsigned char len)
  61          {
  62   1              unsigned char i=0;
  63   1              unsigned char temp = Uart_Recv_buff_size;
  64   1      
  65   1              if(Uart_Recv_buff_size == 0)
  66   1                      return 0;
  67   1      
  68   1              if(len > temp)
  69   1                      len = temp;
  70   1      
  71   1              for(i=0;i<len;i++)
  72   1                      pBuf[i] = Uart_Recv_buff[i];
  73   1      
  74   1              //atom process
  75   1              temp = Uart_Recv_buff_size - len;
  76   1              Uart_Recv_buff_size = temp;
  77   1              for(i=0;i<temp;i++)
  78   1                      Uart_Recv_buff[i] = Uart_Recv_buff[len + i];
  79   1              //
  80   1      
  81   1              return len;
  82   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    179    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       4
   IDATA SIZE       =     18    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
