C51 COMPILER V9.60.0.0   F31X_BLINKY                                                       01/27/2020 01:37:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE F31X_BLINKY
OBJECT MODULE PLACED IN .\src\F31x_Blinky.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe F:\simplicity_st
                    -udo_workspace\F31x_Blinky\src\F31x_Blinky.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIM
                    -IZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/s
                    -hared/si8051Base;D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/C8051F310/inc) PRINT(.\src\F31x_B
                    -linky.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\F31x_Blinky.OBJ)

line level    source

   1          
   2          //-----------------------------------------------------------------------------
   3          // Includes
   4          //-----------------------------------------------------------------------------
   5          #include <SI_C8051F310_Register_Enums.h>
   6          #include "timer.h"
   7          #include "uart.h"
   8          #include "adc.h"
   9          #include "sys.h"
  10          
  11          
  12          unsigned char sta_msg[18] = {'$','s','t','a',',','0','0','0','.','0',',','0','.','0','*',0x0d,0x0a};
  13          unsigned char sta_msg_len = 0;
  14          
  15          //cmd format
  16          //0-1 eb 90
  17          //2-5 ftw_lower
  18          //6-9 ftw_upper
  19          //10-13 step
  20          //14-15 rate
  21          //
  22          unsigned char cmd_msg[30] = {0xeb,0x90,0x00,0x00,0x00,0x00};
  23          unsigned char cmd_msg_len;
  24          
  25          unsigned char Uart_buff[20];
  26          unsigned char Uart_buff_size = 0;
  27          
  28          unsigned int adc_var;
  29          unsigned char adc_target = 0;
  30          float temperature = 0.0;
  31          float bite = 0.0;
  32          //-----------------------------------------------------------------------------
  33          // SiLabs_Startup() Routine
  34          // ----------------------------------------------------------------------------
  35          // This function is called immediately after reset, before the initialization
  36          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  37          // useful place to disable the watchdog timer, which is enable by default
  38          // and may trigger before main() in some instances.
  39          //-----------------------------------------------------------------------------
  40          void SiLabs_Startup (void)
  41          {
  42   1         PCA0MD &= ~0x40;                       // WDTE = 0 (clear watchdog timer
  43   1      }
  44          
  45          unsigned char Float_Format(float var,unsigned char* pBuf)
  46          {
  47   1              unsigned int byte;
  48   1              unsigned char index=0;
  49   1      
  50   1              //100/symbol
  51   1              if(var < 0)
  52   1              {
C51 COMPILER V9.60.0.0   F31X_BLINKY                                                       01/27/2020 01:37:20 PAGE 2   

  53   2                      pBuf[index] = '-';
  54   2                      index++;
  55   2              }
  56   1              else
  57   1              {
  58   2                      byte = var / 100.0;
  59   2                      if(byte != 0)
  60   2                      {
  61   3                              pBuf[index] = byte + 0x30;
  62   3                              index++;
  63   3                      }
  64   2              }
  65   1      
  66   1              //10
  67   1              var -= (byte * 100);
  68   1              byte = var / 10.0;
  69   1              if(byte != 0)
  70   1              {
  71   2                      pBuf[index] = byte + 0x30;
  72   2                      index++;
  73   2              }
  74   1      
  75   1              //1
  76   1              var -= (byte * 10);
  77   1              byte = var;
  78   1              pBuf[index] = byte + 0x30;
  79   1              index++;
  80   1      
  81   1              //.
  82   1              pBuf[index] = '.';
  83   1              index++;
  84   1      
  85   1              //.1
  86   1              var -= byte;
  87   1              var *= 10;
  88   1              byte = var;
  89   1              pBuf[index] = byte + 0x30;
  90   1              index++;
  91   1      
  92   1              return index;
  93   1      }
  94          
  95          void Teamperature_Convert()
  96          {
  97   1              temperature = adc_var;
  98   1              temperature /= 1024.0;
  99   1              temperature *= 3300;
 100   1              temperature -= 897;
 101   1              temperature /= 3.35;
 102   1      }
 103          
 104          void Bite_Convert()
 105          {
 106   1      
 107   1      }
 108           
 109          void State_Msg()
 110          {
 111   1              sta_msg_len = 5;
 112   1              sta_msg_len += Float_Format(temperature,sta_msg+sta_msg_len);
 113   1              sta_msg[sta_msg_len] = ',';
 114   1              sta_msg_len++;
 115   1              sta_msg_len += Float_Format(bite,sta_msg+sta_msg_len);
C51 COMPILER V9.60.0.0   F31X_BLINKY                                                       01/27/2020 01:37:20 PAGE 3   

 116   1      
 117   1              sta_msg[sta_msg_len] = '*';
 118   1              sta_msg_len++;
 119   1              sta_msg[sta_msg_len] = 0x0d;
 120   1              sta_msg_len++;
 121   1      
 122   1              sta_msg[sta_msg_len] = 0x0a;
 123   1              sta_msg_len++;
 124   1      }
 125          
 126          unsigned char Frame2CmdConvert()
 127          {
 128   1              unsigned char i;
 129   1              i = UART_GetBuff(Uart_buff + Uart_buff_size,20-Uart_buff_size);
 130   1              Uart_buff_size += i;
 131   1      
 132   1              if(Uart_buff_size >= 3)
 133   1              {
 134   2                      if((Uart_buff[0] == '#')
 135   2                                      && (Uart_buff[1] == 'K')
 136   2                                      && (Uart_buff[2] == 'R'))
 137   2                      {
 138   3                              return 0;
 139   3                      }
 140   2                      else if((Uart_buff[0] == '#')
 141   2                                      && (Uart_buff[1] == 'P')
 142   2                                      && (Uart_buff[2] == 'W'))
 143   2                      {
 144   3      
 145   3                      }
 146   2                      else if((Uart_buff[0] == '#')
 147   2                                      && (Uart_buff[1] == 'G')
 148   2                                      && (Uart_buff[2] == 'N'))
 149   2                      {
 150   3      
 151   3                      }
 152   2                      else if((Uart_buff[0] == '#')
 153   2                                      && (Uart_buff[1] == 'R')
 154   2                                      && (Uart_buff[2] == 'F'))
 155   2                      {
 156   3      
 157   3                      }
 158   2                      else if((Uart_buff[0] == '#')
 159   2                                      && (Uart_buff[1] == 'C')
 160   2                                      && (Uart_buff[2] == 'T'))
 161   2                      {
 162   3      
 163   3                      }
 164   2                      else
 165   2                      {
 166   3                              for(i=0;i<Uart_buff_size-1;i++)
 167   3                                      Uart_buff[i] = Uart_buff[i+1];
 168   3                      }
 169   2              }
 170   1              else if(Uart_buff_size >= 4)
 171   1              {
 172   2                      if((Uart_buff[0] == '#')
 173   2                                      && (Uart_buff[1] == 'F')
 174   2                                      && (Uart_buff[2] == 'R')
 175   2                                      && (Uart_buff[3] == 'Q'))
 176   2                      {
 177   3      
 178   3                      }
C51 COMPILER V9.60.0.0   F31X_BLINKY                                                       01/27/2020 01:37:20 PAGE 4   

 179   2                      else if((Uart_buff[0] == '#')
 180   2                                      && (Uart_buff[1] == 'P')
 181   2                                      && (Uart_buff[2] == 'R')
 182   2                                      && (Uart_buff[3] == 'T'))
 183   2                      {
 184   3      
 185   3                      }
 186   2                      else if((Uart_buff[0] == '#')
 187   2                                      && (Uart_buff[1] == 'M')
 188   2                                      && (Uart_buff[2] == 'O')
 189   2                                      && (Uart_buff[3] == 'D'))
 190   2                      {
 191   3      
 192   3                      }
 193   2                      else if((Uart_buff[0] == '#')
 194   2                                      && (Uart_buff[1] == 'A')
 195   2                                      && (Uart_buff[2] == 'T')
 196   2                                      && (Uart_buff[3] == 'T'))
 197   2                      {
 198   3      
 199   3                      }
 200   2                      else if((Uart_buff[0] == '#')
 201   2                                      && (Uart_buff[1] == 'A')
 202   2                                      && (Uart_buff[2] == 'A')
 203   2                                      && (Uart_buff[3] == 'A'))
 204   2                      {
 205   3      
 206   3                      }
 207   2                      else if((Uart_buff[0] == '#')
 208   2                                      && (Uart_buff[1] == 'P')
 209   2                                      && (Uart_buff[2] == 'S')
 210   2                                      && (Uart_buff[3] == 'A'))
 211   2                      {
 212   3      
 213   3                      }
 214   2                      else if((Uart_buff[0] == '#')
 215   2                                      && (Uart_buff[1] == 'A')
 216   2                                      && (Uart_buff[2] == 'A')
 217   2                                      && (Uart_buff[3] == 'B'))
 218   2                      {
 219   3      
 220   3                      }
 221   2                      else if((Uart_buff[0] == '#')
 222   2                                      && (Uart_buff[1] == 'P')
 223   2                                      && (Uart_buff[2] == 'S')
 224   2                                      && (Uart_buff[3] == 'B'))
 225   2                      {
 226   3      
 227   3                      }
 228   2                      else if((Uart_buff[0] == '#')
 229   2                                      && (Uart_buff[1] == 'A')
 230   2                                      && (Uart_buff[2] == 'A')
 231   2                                      && (Uart_buff[3] == 'C'))
 232   2                      {
 233   3      
 234   3                      }
 235   2                      else if((Uart_buff[0] == '#')
 236   2                                      && (Uart_buff[1] == 'P')
 237   2                                      && (Uart_buff[2] == 'S')
 238   2                                      && (Uart_buff[3] == 'C'))
 239   2                      {
 240   3                              return 1;
 241   3                      }
C51 COMPILER V9.60.0.0   F31X_BLINKY                                                       01/27/2020 01:37:20 PAGE 5   

 242   2              }
 243   1      }
 244          
 245          
 246          //-----------------------------------------------------------------------------
 247          // MAIN Routine
 248          //-----------------------------------------------------------------------------
 249          void main (void)
 250          {
 251   1              Init_Device();
 252   1      
 253   1              while(1)
 254   1              {
 255   2                      if(ADC_Get(&adc_var) == 1)
 256   2                      {
 257   3                              if(adc_target == 0)
 258   3                                      Teamperature_Convert();
 259   3                              else Bite_Convert();
 260   3      
 261   3                              //adc_target ^= 0xff;
 262   3                      }
 263   2      
 264   2                      State_Msg();
 265   2                      UART_Send(sta_msg,sta_msg_len);
 266   2      
 267   2                      if(Frame2CmdConvert() == 1)
 268   2                      {
 269   3      
 270   3                      }
 271   2      
 272   2                      ADC_Start(adc_target);
 273   2              }
 274   1      }
*** WARNING C291 IN LINE 243 OF F:\simplicity_studo_workspace\F31x_Blinky\src\F31x_Blinky.c: not every exit path returns
             - a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1034    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     82      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
